# Generated by Django 5.1.7 on 2025-03-27 01:48

import logging
from django.db import migrations


def create_missing_segmentations(apps, schema_editor):
    """Create Segmentation records for any Recording that has Segments but no Segmentation."""
    Recording = apps.get_model('battycoda_app', 'Recording')
    Segment = apps.get_model('battycoda_app', 'Segment')
    Segmentation = apps.get_model('battycoda_app', 'Segmentation')
    
    # Get all recordings with segments
    recordings_with_segments = set(Segment.objects.values_list('recording_id', flat=True).distinct())
    
    # Get all recordings with segmentations
    recordings_with_segmentations = set(Segmentation.objects.values_list('recording_id', flat=True).distinct())
    
    # Find recordings that have segments but no segmentation
    recordings_needing_segmentation = recordings_with_segments - recordings_with_segmentations
    
    # Count how many we need to create
    count = len(recordings_needing_segmentation)
    logger = logging.getLogger('django.db.migrations')
    logger.info(f"Creating {count} missing segmentation records")
    
    # Create segmentation records for these recordings
    for recording_id in recordings_needing_segmentation:
        try:
            # Get the recording
            recording = Recording.objects.get(id=recording_id)
            
            # Create a new segmentation
            segmentation = Segmentation(
                recording=recording,
                status='completed',  # Already completed since segments exist
                progress=100,
                created_by=recording.created_by
            )
            segmentation.save()
            
            # Log success
            logger.info(f"Created segmentation for recording {recording_id}")
        except Exception as e:
            # Log error but continue with other recordings
            logger.error(f"Error creating segmentation for recording {recording_id}: {str(e)}")
    
    logger.info(f"Completed creating {count} segmentation records")


def reverse_migration(apps, schema_editor):
    """No need to reverse this migration."""
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("battycoda_app", "0034_rename_segmentation_job_to_segmentation"),
    ]

    operations = [
        migrations.RunPython(create_missing_segmentations, reverse_migration),
    ]
