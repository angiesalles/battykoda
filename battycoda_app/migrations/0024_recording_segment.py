# Generated by Django 5.1.7 on 2025-03-24 20:08

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('battycoda_app', '0023_create_rdirect_classifier'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the recording', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the recording', null=True)),
                ('wav_file', models.FileField(help_text='WAV file for the recording', upload_to='recordings/')),
                ('duration', models.FloatField(blank=True, help_text='Duration of the recording in seconds', null=True)),
                ('recorded_date', models.DateField(blank=True, help_text='Date when the recording was made', null=True)),
                ('location', models.CharField(blank=True, help_text='Location where the recording was made', max_length=255, null=True)),
                ('equipment', models.CharField(blank=True, help_text='Equipment used for recording', max_length=255, null=True)),
                ('environmental_conditions', models.TextField(blank=True, help_text='Environmental conditions during recording', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Project this recording belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='battycoda_app.project')),
                ('species', models.ForeignKey(help_text='Species associated with this recording', on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='battycoda_app.species')),
                ('team', models.ForeignKey(help_text='Team that owns this recording', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='battycoda_app.team')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Segment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Optional name for this segment', max_length=255, null=True)),
                ('onset', models.FloatField(help_text='Start time of the segment in seconds')),
                ('offset', models.FloatField(help_text='End time of the segment in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Notes about this segment', null=True)),
                ('call_type', models.ForeignKey(blank=True, help_text='Call type classification', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='segments', to='battycoda_app.call')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='segments', to=settings.AUTH_USER_MODEL)),
                ('recording', models.ForeignKey(help_text='Recording this segment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='segments', to='battycoda_app.recording')),
                ('task', models.OneToOneField(blank=True, help_text='Task created from this segment, if any', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='source_segment', to='battycoda_app.task')),
            ],
            options={
                'ordering': ['onset'],
            },
        ),
    ]
